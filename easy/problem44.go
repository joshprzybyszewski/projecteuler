package easy

import (
	"fmt"
	"log"

	"github.com/joshprzybyszewski/projecteuler/sequence"
)

func SolveProblem44() string {
	/*
		Pentagonal numbers are generated by the formula,
		Pn=n(3n−1)/2.
		The first ten pentagonal numbers are:

		1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

		It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
		However, their difference, 70 − 22 = 48, is not pentagonal.

		Find the pair of pentagonal numbers, Pj and Pk, for which
		their sum and difference are pentagonal and D = |Pk − Pj|
		is minimised;
		what is the value of D?
	*/
	ans := getProblem44Answer()
	return fmt.Sprintf("%v", ans)
}

func getProblem44Answer() int {
	for d := uint(1000); ; d++ {
		pd := sequence.Pentagonal.GetNth(d)
		log.Printf("Checking d = %d, pd = %d\n", d, pd)
		shouldBreakK := false
		for k := uint(1); !shouldBreakK; k++ {
			pk := sequence.Pentagonal.GetNth(k)
			next := sequence.Pentagonal.GetNth(k + 1)
			if pd < next-pk {
				log.Printf("\t Breaking at k = %d, pk = %d\n", k, pk)
				shouldBreakK = true
				continue
			}
			pj := pk + pd
			if sequence.Pentagonal.Is(pj) {
				if sequence.Pentagonal.Is(pj + pk) {
					return pd
				}
			}
		}
	}
}
