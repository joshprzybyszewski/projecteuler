package easy

import (
	"fmt"

	"github.com/joshprzybyszewski/projecteuler/mathUtils"
)

func SolveProblem12() {
	/*
		The sequence of triangle numbers is generated by adding the natural
		 numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

		Let us list the factors of the first seven triangle numbers:

		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
		We can see that 28 is the first triangle number to have over five divisors.

		What is the value of the first triangle number to have over five hundred
		divisors?
	*/
	ans := getTriangleNumberWithMoreThanNDivisors(500)
	fmt.Printf("Problem 12 Answer: %d\n", ans)
}

func getTriangleNumberWithMoreThanNDivisors(n int) int {
	tri := 1
	index := 1

	minPossible := n * n

	for {
		if tri > minPossible {
			if getNumDivisors(tri) >= n {
				return tri
			}
		}

		index++
		tri += index
	}
}

func getNumDivisors(
	n int,
) int {
	return len(mathUtils.Divisors(n))
}
